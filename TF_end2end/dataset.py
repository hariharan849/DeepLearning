# -*- coding: utf-8 -*-
"""TF-dataset-class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yEiQ5ypGdwaAaB0WjH1S9Fz2Z_HE-IKV
"""

import os, pathlib
import pandas as pd
import keras as kr
import tensorflow as tf
import tensorflow_datasets as tfds
from keras.src.legacy.preprocessing.image import ImageDataGenerator
try:
    import splitfolders
except:
    ! pip install split-folders
    import splitfolders

class DatasetLoader:
  def __init__(self, image_dataset_folder, num_classes=10, dataset_name="", img_height=224, img_width=224, batch_size=32, validation_split=0.2, image_preprocess=None, label_preprocess=tf.one_hot):
    self._image_dataset_folder = image_dataset_folder
    self._dataset_name = dataset_name
    self._img_height = img_height
    self._img_width = img_width
    self._batch_size = batch_size
    self._validation_split = validation_split
    self._image_preprocess = image_preprocess
    self._label_preprocess = label_preprocess
    self._num_classes = num_classes

  def _input_preprocess_train(self, image, label):
    if self._image_preprocess:
      image = self._image_preprocess(image)
    else:
      image = tf.cast(image, tf.float32) / 255.0  # Normalize image to [0, 1]

    label = self._label_preprocess(label, self._num_classes)

    return image, label

  def _input_preprocess_test(self, image, label):
    label = self._label_preprocess(label, self._num_classes)
    return image, label

  def _load_oob_dataset(self):
    """ Loads OutOfBox dataset from tensorflow datasets
    """
    (ds_train, ds_test), ds_info = tfds.load(
        self._dataset_name, split=["train", "test"], with_info=True, as_supervised=True
    )
    # Define the train-validation split (e.g., 80-20 split)
    train_split = 0.8  # 80% for training

    train_size = int(ds_info.splits["train"].num_examples * train_split)
    val_size = ds_info.splits["train"].num_examples - train_size

    train_ds = ds_train.take(train_size)  # Take the first 80% for training
    ds_val = ds_train.skip(train_size)    # Skip the first 80% for validation

    ds_train = ds_train.map(self._input_preprocess_train, num_parallel_calls=tf.data.AUTOTUNE)
    ds_train = ds_train.batch(batch_size=self._batch_size, drop_remainder=True)
    ds_train = ds_train.prefetch(tf.data.AUTOTUNE)

    ds_val = ds_val.map(self._input_preprocess_test, num_parallel_calls=tf.data.AUTOTUNE)
    ds_val = ds_val.batch(batch_size=self._batch_size, drop_remainder=True)

    ds_test = ds_test.map(self._input_preprocess_test, num_parallel_calls=tf.data.AUTOTUNE)
    ds_test = ds_test.batch(batch_size=self._batch_size, drop_remainder=True)

    return ds_train, ds_val, ds_test

  def _get_image_dataset_from_jpg(self, imageFolderPath):
    """ Returns dataset

        Args:
            image_folder_path(str) : Folder containing images for training and validation
    """
    ds = tf.keras.image_dataset_from_directory(
        imageFolderPath,
        labels='inferred',
        label_mode='categorical',
        class_names=None,
        color_mode='rgb',
        shuffle=True,
        seed=123,
        image_size=(self._img_height, self._img_width),
        batch_size=self._batch_size
    )

    AUTOTUNE = tf.data.AUTOTUNE
    ds = ds.cache().prefetch(buffer_size=AUTOTUNE)
    return ds

  @staticmethod
  def get_img_extension(imageFolderPath):
    """ Returns list of image extensions from image paths folder

        Args:
            image_folder_path(str): Image path directory
    """
    images = list(pathlib.Path(imageFolderPath).glob("*/*"))
    return [os.path.splitext(img_path)[-1] for img_path in images]

  def get_image_dataset_from_multiple_ext(self, train_dir, val_dir, test_dir):
    """ Creates train and validation dataset from jpg image folder hierarchy
    """
    train_datagen = ImageDataGenerator(
        rescale=1/255.0,
        horizontal_flip=True,
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        fill_mode="nearest"
    )

    valid_datagen = ImageDataGenerator(rescale=1/255.0)

    train_gen = train_datagen.flow_from_directory(
        train_dir,
        seed=45,
        batch_size=self._batch_size,
        target_size=(self._img_height, self._img_width),
        color_mode="rgb",
        class_mode='categorical'
    )
    val_gen = valid_datagen.flow_from_directory(
        val_dir,
        seed=45,
        batch_size=self._batch_size,
        target_size=(self._img_height, self._img_width),
        color_mode="rgb",
        class_mode='categorical'
    )
    test_datagen = ImageDataGenerator(rescale=1./255)
    test_gen = test_datagen.flow_from_directory(
        test_dir,
        target_size=(self._img_height, self._img_width),
        batch_size=32,
        class_mode='categorical',
    )

    return train_gen, val_gen, test_gen


  def load_dataset(self):
    if self._dataset_name:
      return self._load_oob_dataset()

    directories = os.listdir(self._image_dataset_folder)
    if "train" in directories:
      train_dir = os.path.join(self._image_dataset_folder, "train")
      val_dir = test_dir = None
      if "test" in directories:
        test_dir = os.path.join(self._image_dataset_folder, "test")
      if "validation" in directories:
        val_dir = os.path.join(self._image_dataset_folder, "validation")
    else:
      train_split = 1.0-self._validation_split-0.1
      output_folder = os.path.dirname(self._image_dataset_folder)

      train_dir, val_dir, test_dir = splitfolders.ratio(
          self._image_dataset_folder, output=output_folder, seed=1337, ratio = (train_split, self._validation_split, 0.1)
      )

    ext = DatasetLoader.get_img_extension(train_dir)
    if len(ext) == 1 and ext[0] == "jpg":
      ds_train = self._get_image_dataset_from_jpg(train_dir)
      ds_val = self._get_image_dataset_from_jpg(val_dir)
      ds_test = self._get_image_dataset_from_jpg(test_dir)
      return ds_train, ds_val, ds_test
    else:
      return self.get_image_dataset_from_multiple_ext(train_dir, val_dir, test_dir)